#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
audit_split.py
---------------
Quick sanity-check for your split files (train/val/test).
- Confirms which files are loaded
- Prints label prevalence (mortality rate)
- Shows missingness
- Checks feature overlap across splits

Search paths: data/csv_splits/, then data/splits/
"""

import sys
from pathlib import Path
import pandas as pd

def _read(p: Path):
    if p.suffix.lower() == ".csv":
        return pd.read_csv(p)
    if p.suffix.lower() in (".parquet",".pq"):
        return pd.read_parquet(p)
    raise ValueError(f"Unsupported file type: {p}")

def pick_label(df: pd.DataFrame, preferred=None):
    if preferred and preferred in df.columns: return preferred
    for c in ("y","mortality","label","target","death","in_hospital_mortality"):
        if c in df.columns: return c
    raise ValueError(f"No label column found in {df.columns}")

def load_three(stem: str):
    roots = [Path("data/csv_splits"), Path("data/splits")]
    exts  = [".csv",".parquet",".pq"]
    paths = {}
    for split in ("train","val","test"):
        for r in roots:
            for e in exts:
                p = r / f"{stem}_{split}{e}"
                if p.exists():
                    paths[split] = p
                    break
            if split in paths: break
    if set(paths.keys()) != {"train","val","test"}:
        raise FileNotFoundError(f"Could not find {stem}_train/val/test in data/csv_splits/ or data/splits/")
    d = {k:_read(v) for k,v in paths.items()}
    return d["train"], d["val"], d["test"], paths

def summarize(df, name, ycol):
    y = df[ycol].astype(int)
    X = df.drop(columns=[ycol])
    print(f"\n[{name}] rows={len(df):,}, features={X.shape[1]}")
    print(f"  label mean: {y.mean():.4f} (pos={y.sum():,} / {len(y):,})")
    miss = X.isna().mean().sort_values(ascending=False)
    print(f"  top missing:\n{miss.head(10).to_string()}")
    return set(X.columns)

def main():
    # scenario: random | hospital | temporal
    scenario = sys.argv[1] if len(sys.argv) > 1 else "random"
    suffix = sys.argv[2] if len(sys.argv) > 2 else ""

    stem = scenario if suffix == "" else f"{scenario}_{suffix}"
    tr, va, te, paths = load_three(stem)
    print("Loaded:")
    for k,p in paths.items(): print(f"  - {k}: {p}")

    ycol = pick_label(tr)

    ftr_tr = summarize(tr, "train", ycol)
    ftr_va = summarize(va, "val",   ycol if ycol in va.columns else pick_label(va))
    ftr_te = summarize(te, "test",  ycol if ycol in te.columns else pick_label(te))

    # Feature alignment check
    inter = ftr_tr & ftr_va & ftr_te
    only_tr, only_va, only_te = ftr_tr - inter, ftr_va - inter, ftr_te - inter
    print("\nFeature overlap:")
    print(f"  common: {len(inter)}")
    print(f"  only in train: {len(only_tr)}")
    print(f"  only in val:   {len(only_va)}")
    print(f"  only in test:  {len(only_te)}")
    if only_tr: print("    e.g.,", list(sorted(only_tr))[:10])
    if only_va: print("    e.g.,", list(sorted(only_va))[:10])
    if only_te: print("    e.g.,", list(sorted(only_te))[:10])

if __name__ == "__main__":
    main()
